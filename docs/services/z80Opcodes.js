'use strict';


// this retrieves the existing module
var myModule = angular.module('myApp.services');


myModule.factory('z80opCodes', function() {

    var opcodes = {
        'NOP': 0x00,
        'LD BC,&0000': 0x01,
        'LD (BC),A': 0x02,
        'INC BC': 0x03,
        'INC B': 0x04,
        'DEC B': 0x05,
        'LD B,&00': 0x06,
        'RLCA': 0x07,
        'EX AF,AF': 0x08,
        "EX AF,AF'": 0x08,
        'ADD HL,BC': 0x09,
        'LD A,(BC)': 0x0A,
        'DEC BC': 0x0B,
        'INC C': 0x0C,
        'DEC C': 0x0D,
        'LD C,&00': 0x0E,
        'RRCA': 0x0F,
        'DJNZ &4546': 0x10,
        'LD DE,&0000': 0x11,
        'LD (DE),A': 0x12,
        'INC DE': 0x13,
        'INC D': 0x14,
        'DEC D': 0x15,
        'LD D,&00': 0x16,
        'RLA': 0x17,
        'JR &4546': 0x18,
        'ADD HL,DE': 0x19,
        'LD A,(DE)': 0x1A,
        'DEC DE': 0x1B,
        'INC E': 0x1C,
        'DEC E': 0x1D,
        'LD E,&00': 0x1E,
        'RRA': 0x1F,
        'JR NZ,&4546': 0x20,
        'LD HL,&0000': 0x21,
        'LD (&0000),HL': 0x22,
        'INC HL': 0x23,
        'INC H': 0x24,
        'DEC H': 0x25,
        'LD H,&00': 0x26,
        'DAA': 0x27,
        'JR Z,&4546': 0x28,
        'ADD HL,HL': 0x29,
        'LD HL,(&0000)': 0x2A,
        'DEC HL': 0x2B,
        'INC L': 0x2C,
        'DEC L': 0x2D,
        'LD L,&00': 0x2E,
        'CPL': 0x2F,
        'JR NC,&4546': 0x30,
        'LD SP,&0000': 0x31,
        'LD (&0000),A': 0x32,
        'INC SP': 0x33,
        'INC (HL)': 0x34,
        'DEC (HL)': 0x35,
        'LD (HL),&00': 0x36,
        'SCF': 0x37,
        'JR C,&4546': 0x38,
        'ADD HL,SP': 0x39,
        'LD A,(&0000)': 0x3A,
        'DEC SP': 0x3B,
        'INC A': 0x3C,
        'DEC A': 0x3D,
        'LD A,&00': 0x3E,
        'CCF': 0x3F,
        'LD B,B': 0x40,
        'LD B,C': 0x41,
        'LD B,D': 0x42,
        'LD B,E': 0x43,
        'LD B,H': 0x44,
        'LD B,L': 0x45,
        'LD B,(HL)': 0x46,
        'LD B,A': 0x47,
        'LD C,B': 0x48,
        'LD C,C': 0x49,
        'LD C,D': 0x4A,
        'LD C,E': 0x4B,
        'LD C,H': 0x4C,
        'LD C,L': 0x4D,
        'LD C,(HL)': 0x4E,
        'LD C,A': 0x4F,
        'LD D,B': 0x50,
        'LD D,C': 0x51,
        'LD D,D': 0x52,
        'LD D,E': 0x53,
        'LD D,H': 0x54,
        'LD D,L': 0x55,
        'LD D,(HL)': 0x56,
        'LD D,A': 0x57,
        'LD E,B': 0x58,
        'LD E,C': 0x59,
        'LD E,D': 0x5A,
        'LD E,E': 0x5B,
        'LD E,H': 0x5C,
        'LD E,L': 0x5D,
        'LD E,(HL)': 0x5E,
        'LD E,A': 0x5F,
        'LD H,B': 0x60,
        'LD H,C': 0x61,
        'LD H,D': 0x62,
        'LD H,E': 0x63,
        'LD H,H': 0x64,
        'LD H,L': 0x65,
        'LD H,(HL)': 0x66,
        'LD H,A': 0x67,
        'LD L,B': 0x68,
        'LD L,C': 0x69,
        'LD L,D': 0x6A,
        'LD L,E': 0x6B,
        'LD L,H': 0x6C,
        'LD L,L': 0x6D,
        'LD L,(HL)': 0x6E,
        'LD L,A': 0x6F,
        'LD (HL),B': 0x70,
        'LD (HL),C': 0x71,
        'LD (HL),D': 0x72,
        'LD (HL),E': 0x73,
        'LD (HL),H': 0x74,
        'LD (HL),L': 0x75,
        'HALT': 0x76,
        'LD (HL),A': 0x77,
        'LD A,B': 0x78,
        'LD A,C': 0x79,
        'LD A,D': 0x7A,
        'LD A,E': 0x7B,
        'LD A,H': 0x7C,
        'LD A,L': 0x7D,
        'LD A,(HL)': 0x7E,
        'LD A,A': 0x7F,
        'ADD A,B': 0x80,
        'ADD A,C': 0x81,
        'ADD A,D': 0x82,
        'ADD A,E': 0x83,
        'ADD A,H': 0x84,
        'ADD A,L': 0x85,
        'ADD A,(HL)': 0x86,
        'ADD A,A': 0x87,
        'ADC A,B': 0x88,
        'ADC A,C': 0x89,
        'ADC A,D': 0x8A,
        'ADC A,E': 0x8B,
        'ADC A,H': 0x8C,
        'ADC A,L': 0x8D,
        'ADC A,(HL)': 0x8E,
        'ADC A,A': 0x8F,
        'SUB A,B': 0x90,
        'SUB B': 0x90,
        'SUB A,C': 0x91,
        'SUB C': 0x91,
        'SUB A,D': 0x92,
        'SUB D': 0x92,
        'SUB A,E': 0x93,
        'SUB E': 0x93,
        'SUB A,H': 0x94,
        'SUB H': 0x94,
        'SUB A,L': 0x95,
        'SUB L': 0x95,
        'SUB A,(HL)': 0x96,
        'SUB (HL)': 0x96,
        'SUB A,A': 0x97,
        'SUB A': 0x97,
        'SBC A,B': 0x98,
        'SBC A,C': 0x99,
        'SBC A,D': 0x9A,
        'SBC A,E': 0x9B,
        'SBC A,H': 0x9C,
        'SBC A,L': 0x9D,
        'SBC A,(HL)': 0x9E,
        'SBC A,A': 0x9F,
        'AND B': 0xA0,
        'AND C': 0xA1,
        'AND D': 0xA2,
        'AND E': 0xA3,
        'AND H': 0xA4,
        'AND L': 0xA5,
        'AND (HL)': 0xA6,
        'AND A': 0xA7,
        'XOR B': 0xA8,
        'XOR C': 0xA9,
        'XOR D': 0xAA,
        'XOR E': 0xAB,
        'XOR H': 0xAC,
        'XOR L': 0xAD,
        'XOR (HL)': 0xAE,
        'XOR A': 0xAF,
        'OR B': 0xB0,
        'OR C': 0xB1,
        'OR D': 0xB2,
        'OR E': 0xB3,
        'OR H': 0xB4,
        'OR L': 0xB5,
        'OR (HL)': 0xB6,
        'OR A': 0xB7,
        'CP B': 0xB8,
        'CP C': 0xB9,
        'CP D': 0xBA,
        'CP E': 0xBB,
        'CP H': 0xBC,
        'CP L': 0xBD,
        'CP (HL)': 0xBE,
        'CP A': 0xBF,
        'RET NZ': 0xC0,
        'POP BC': 0xC1,
        'JP NZ,&0000': 0xC2,
        'JP &0000': 0xC3,
        'CALL NZ,&0000': 0xC4,
        'PUSH BC': 0xC5,
        'ADD A,&00': 0xC6,
        'RST 00H': 0xC7,
        'RET Z': 0xC8,
        'RET': 0xC9,
        'JP Z,&0000': 0xCA,
/*        '**** CB ****': 0xCB, */
        'CALL Z,&0000': 0xCC,
        'CALL &0000': 0xCD,
        'ADC A,&00': 0xCE,
        'RST 08H': 0xCF,
        'RET NC': 0xD0,
        'POP DE': 0xD1,
        'JP NC,&0000': 0xD2,
        'OUT (&00),A': 0xD3,
        'CALL NC,&0000': 0xD4,
        'PUSH DE': 0xD5,
        'SUB A,&00': 0xD6,
        'SUB &00': 0xD6,
        'RST 10H': 0xD7,
        'RET C': 0xD8,
        'EXX': 0xD9,
        'JP C,&0000': 0xDA,
        'IN A,(&00)': 0xDB,
        'CALL C,&0000': 0xDC,
/*        '**** DD ****': 0xDD, */
        'SBC A,&00': 0xDE,
        'RST 18H': 0xDF,
        'RET PO': 0xE0,
        'POP HL': 0xE1,
        'JP PO,&0000': 0xE2,
        'EX (SP),HL': 0xE3,
        'CALL PO,&0000': 0xE4,
        'PUSH HL': 0xE5,
        'AND &00': 0xE6,
        'RST 20H': 0xE7,
        'RET PE': 0xE8,
        'JP (HL)': 0xE9,
        'JP PE,&0000': 0xEA,
        'EX DE,HL': 0xEB,
        'CALL PE,&0000': 0xEC,
/*        '**** ED ****': 0xED, */
        'XOR &00': 0xEE,
        'RST 28H': 0xEF,
        'RET P': 0xF0,
        'POP AF': 0xF1,
        'JP P,&0000': 0xF2,
        'DI': 0xF3,
        'CALL P,&0000': 0xF4,
        'PUSH AF': 0xF5,
        'OR &00': 0xF6,
        'RST 30H': 0xF7,
        'RET M': 0xF8,
        'LD SP,HL': 0xF9,
        'JP M,&0000': 0xFA,
        'EI': 0xFB,
        'CALL M,&0000': 0xFC,
/*        '**** FD ****': 0xFD, */
        'CP &00': 0xFE,
        'RST 38H': 0xFF
    };

    var dd_codes = {
        'ADD IX,BC': 0x09,
        'ADD IX,DE': 0x19,
        'LD IX,&0000': 0x21,
        'LD (&0000),IX': 0x22,
        'INC IX': 0x23,
        'INC IXH': 0x24,
        'DEC IXH': 0x25,
        'LD IXH,&00': 0x26,
        'ADD IX,IX': 0x29,
        'LD IX,(&0000)': 0x2A,
        'DEC IX': 0x2B,
        'INC IXL': 0x2C,
        'DEC IXL': 0x2D,
        'LD IXL,&00': 0x2E,
        'INC (IX+&00)': 0x34,
        'DEC (IX+&00)': 0x35,
        'LD (IX+&00),&00': 0x36,
        'ADD IX,SP': 0x39,
        'LD B,IXH': 0x44,
        'LD B,IXL': 0x45,
        'LD B,(IX+&00)': 0x46,
        'LD C,IXH': 0x4C,
        'LD C,IXL': 0x4D,
        'LD C,(IX+&00)': 0x4E,
        'LD D,IXH': 0x54,
        'LD D,IXL': 0x55,
        'LD D,(IX+&00)': 0x56,
        'LD E,IXH': 0x5C,
        'LD E,IXL': 0x5D,
        'LD E,(IX+&00)': 0x5E,
        'LD IXH,B': 0x60,
        'LD IXH,C': 0x61,
        'LD IXH,D': 0x62,
        'LD IXH,E': 0x63,
        'LD IXH,IXH': 0x64,
        'LD IXH,IXL': 0x65,
        'LD H,(IX+&00)': 0x66,
        'LD IXH,A': 0x67,
        'LD IXL,B': 0x68,
        'LD IXL,C': 0x69,
        'LD IXL,D': 0x6A,
        'LD IXL,E': 0x6B,
        'LD IXL,IXH': 0x6C,
        'LD IXL,IXL': 0x6D,
        'LD L,(IX+&00)': 0x6E,
        'LD IXL,A': 0x6F,
        'LD (IX+&00),B': 0x70,
        'LD (IX+&00),C': 0x71,
        'LD (IX+&00),D': 0x72,
        'LD (IX+&00),E': 0x73,
        'LD (IX+&00),H': 0x74,
        'LD (IX+&00),L': 0x75,
        'LD (IX+&00),A': 0x77,
        'LD A,IXH': 0x7C,
        'LD A,IXL': 0x7D,
        'LD A,(IX+&00)': 0x7E,
        'ADD A,IXH': 0x84,
        'ADD A,IXL': 0x85,
        'ADD A,(IX+&00)': 0x86,
        'ADC A,IXH': 0x8C,
        'ADC A,IXL': 0x8D,
        'ADC A,(IX+&00)': 0x8E,
        'SUB A,IXH': 0x94,
        'SUB IXH': 0x94,
        'SUB A,IXL': 0x95,
        'SUB IXL': 0x95,
        'SUB A,(IX+&00)': 0x96,
        'SUB (IX+&00)': 0x96,
        'SBC A,IXH': 0x9C,
        'SBC A,IXL': 0x9D,
        'SBC A,(IX+&00)': 0x9E,
        'AND IXH': 0xA4,
        'AND IXL': 0xA5,
        'AND (IX+&00)': 0xA6,
        'XOR IXH': 0xAC,
        'XOR IXL': 0xAD,
        'XOR (IX+&00)': 0xAE,
        'OR IXH': 0xB4,
        'OR IXL': 0xB5,
        'OR (IX+&00)': 0xB6,
        'CP IXH': 0xBC,
        'CP IXL': 0xBD,
        'CP (IX+&00)': 0xBE,
        'POP IX': 0xE1,
        'EX (SP),IX': 0xE3,
        'PUSH IX': 0xE5,
        'JP (IX)': 0xE9
    };

    var cb_codes = {
        'RLC B': 0x00,
        'RLC C': 0x01,
        'RLC D': 0x02,
        'RLC E': 0x03,
        'RLC H': 0x04,
        'RLC L': 0x05,
        'RLC (HL)': 0x06,
        'RLC A': 0x07,
        'RRC B': 0x08,
        'RRC C': 0x09,
        'RRC D': 0x0A,
        'RRC E': 0x0B,
        'RRC H': 0x0C,
        'RRC L': 0x0D,
        'RRC (HL)': 0x0E,
        'RRC A': 0x0F,
        'RL B': 0x10,
        'RL C': 0x11,
        'RL D': 0x12,
        'RL E': 0x13,
        'RL H': 0x14,
        'RL L': 0x15,
        'RL (HL)': 0x16,
        'RL A': 0x17,
        'RR B': 0x18,
        'RR C': 0x19,
        'RR D': 0x1A,
        'RR E': 0x1B,
        'RR H': 0x1C,
        'RR L': 0x1D,
        'RR (HL)': 0x1E,
        'RR A': 0x1F,
        'SLA B': 0x20,
        'SLA C': 0x21,
        'SLA D': 0x22,
        'SLA E': 0x23,
        'SLA H': 0x24,
        'SLA L': 0x25,
        'SLA (HL)': 0x26,
        'SLA A': 0x27,
        'SRA B': 0x28,
        'SRA C': 0x29,
        'SRA D': 0x2A,
        'SRA E': 0x2B,
        'SRA H': 0x2C,
        'SRA L': 0x2D,
        'SRA (HL)': 0x2E,
        'SRA A': 0x2F,
        'SLS B': 0x30,
        'SLS C': 0x31,
        'SLS D': 0x32,
        'SLS E': 0x33,
        'SLS H': 0x34,
        'SLS L': 0x35,
        'SLS (HL)': 0x36,
        'SLS A': 0x37,
        'SRL B': 0x38,
        'SRL C': 0x39,
        'SRL D': 0x3A,
        'SRL E': 0x3B,
        'SRL H': 0x3C,
        'SRL L': 0x3D,
        'SRL (HL)': 0x3E,
        'SRL A': 0x3F,
        'BIT 0,B': 0x40,
        'BIT 0,C': 0x41,
        'BIT 0,D': 0x42,
        'BIT 0,E': 0x43,
        'BIT 0,H': 0x44,
        'BIT 0,L': 0x45,
        'BIT 0,(HL)': 0x46,
        'BIT 0,A': 0x47,
        'BIT 1,B': 0x48,
        'BIT 1,C': 0x49,
        'BIT 1,D': 0x4A,
        'BIT 1,E': 0x4B,
        'BIT 1,H': 0x4C,
        'BIT 1,L': 0x4D,
        'BIT 1,(HL)': 0x4E,
        'BIT 1,A': 0x4F,
        'BIT 2,B': 0x50,
        'BIT 2,C': 0x51,
        'BIT 2,D': 0x52,
        'BIT 2,E': 0x53,
        'BIT 2,H': 0x54,
        'BIT 2,L': 0x55,
        'BIT 2,(HL)': 0x56,
        'BIT 2,A': 0x57,
        'BIT 3,B': 0x58,
        'BIT 3,C': 0x59,
        'BIT 3,D': 0x5A,
        'BIT 3,E': 0x5B,
        'BIT 3,H': 0x5C,
        'BIT 3,L': 0x5D,
        'BIT 3,(HL)': 0x5E,
        'BIT 3,A': 0x5F,
        'BIT 4,B': 0x60,
        'BIT 4,C': 0x61,
        'BIT 4,D': 0x62,
        'BIT 4,E': 0x63,
        'BIT 4,H': 0x64,
        'BIT 4,L': 0x65,
        'BIT 4,(HL)': 0x66,
        'BIT 4,A': 0x67,
        'BIT 5,B': 0x68,
        'BIT 5,C': 0x69,
        'BIT 5,D': 0x6A,
        'BIT 5,E': 0x6B,
        'BIT 5,H': 0x6C,
        'BIT 5,L': 0x6D,
        'BIT 5,(HL)': 0x6E,
        'BIT 5,A': 0x6F,
        'BIT 6,B': 0x70,
        'BIT 6,C': 0x71,
        'BIT 6,D': 0x72,
        'BIT 6,E': 0x73,
        'BIT 6,H': 0x74,
        'BIT 6,L': 0x75,
        'BIT 6,(HL)': 0x76,
        'BIT 6,A': 0x77,
        'BIT 7,B': 0x78,
        'BIT 7,C': 0x79,
        'BIT 7,D': 0x7A,
        'BIT 7,E': 0x7B,
        'BIT 7,H': 0x7C,
        'BIT 7,L': 0x7D,
        'BIT 7,(HL)': 0x7E,
        'BIT 7,A': 0x7F,
        'RES 0,B': 0x80,
        'RES 0,C': 0x81,
        'RES 0,D': 0x82,
        'RES 0,E': 0x83,
        'RES 0,H': 0x84,
        'RES 0,L': 0x85,
        'RES 0,(HL)': 0x86,
        'RES 0,A': 0x87,
        'RES 1,B': 0x88,
        'RES 1,C': 0x89,
        'RES 1,D': 0x8A,
        'RES 1,E': 0x8B,
        'RES 1,H': 0x8C,
        'RES 1,L': 0x8D,
        'RES 1,(HL)': 0x8E,
        'RES 1,A': 0x8F,
        'RES 2,B': 0x90,
        'RES 2,C': 0x91,
        'RES 2,D': 0x92,
        'RES 2,E': 0x93,
        'RES 2,H': 0x94,
        'RES 2,L': 0x95,
        'RES 2,(HL)': 0x96,
        'RES 2,A': 0x97,
        'RES 3,B': 0x98,
        'RES 3,C': 0x99,
        'RES 3,D': 0x9A,
        'RES 3,E': 0x9B,
        'RES 3,H': 0x9C,
        'RES 3,L': 0x9D,
        'RES 3,(HL)': 0x9E,
        'RES 3,A': 0x9F,
        'RES 4,B': 0xA0,
        'RES 4,C': 0xA1,
        'RES 4,D': 0xA2,
        'RES 4,E': 0xA3,
        'RES 4,H': 0xA4,
        'RES 4,L': 0xA5,
        'RES 4,(HL)': 0xA6,
        'RES 4,A': 0xA7,
        'RES 5,B': 0xA8,
        'RES 5,C': 0xA9,
        'RES 5,D': 0xAA,
        'RES 5,E': 0xAB,
        'RES 5,H': 0xAC,
        'RES 5,L': 0xAD,
        'RES 5,(HL)': 0xAE,
        'RES 5,A': 0xAF,
        'RES 6,B': 0xB0,
        'RES 6,C': 0xB1,
        'RES 6,D': 0xB2,
        'RES 6,E': 0xB3,
        'RES 6,H': 0xB4,
        'RES 6,L': 0xB5,
        'RES 6,(HL)': 0xB6,
        'RES 6,A': 0xB7,
        'RES 7,B': 0xB8,
        'RES 7,C': 0xB9,
        'RES 7,D': 0xBA,
        'RES 7,E': 0xBB,
        'RES 7,H': 0xBC,
        'RES 7,L': 0xBD,
        'RES 7,(HL)': 0xBE,
        'RES 7,A': 0xBF,
        'SET 0,B': 0xC0,
        'SET 0,C': 0xC1,
        'SET 0,D': 0xC2,
        'SET 0,E': 0xC3,
        'SET 0,H': 0xC4,
        'SET 0,L': 0xC5,
        'SET 0,(HL)': 0xC6,
        'SET 0,A': 0xC7,
        'SET 1,B': 0xC8,
        'SET 1,C': 0xC9,
        'SET 1,D': 0xCA,
        'SET 1,E': 0xCB,
        'SET 1,H': 0xCC,
        'SET 1,L': 0xCD,
        'SET 1,(HL)': 0xCE,
        'SET 1,A': 0xCF,
        'SET 2,B': 0xD0,
        'SET 2,C': 0xD1,
        'SET 2,D': 0xD2,
        'SET 2,E': 0xD3,
        'SET 2,H': 0xD4,
        'SET 2,L': 0xD5,
        'SET 2,(HL)': 0xD6,
        'SET 2,A': 0xD7,
        'SET 3,B': 0xD8,
        'SET 3,C': 0xD9,
        'SET 3,D': 0xDA,
        'SET 3,E': 0xDB,
        'SET 3,H': 0xDC,
        'SET 3,L': 0xDD,
        'SET 3,(HL)': 0xDE,
        'SET 3,A': 0xDF,
        'SET 4,B': 0xE0,
        'SET 4,C': 0xE1,
        'SET 4,D': 0xE2,
        'SET 4,E': 0xE3,
        'SET 4,H': 0xE4,
        'SET 4,L': 0xE5,
        'SET 4,(HL)': 0xE6,
        'SET 4,A': 0xE7,
        'SET 5,B': 0xE8,
        'SET 5,C': 0xE9,
        'SET 5,D': 0xEA,
        'SET 5,E': 0xEB,
        'SET 5,H': 0xEC,
        'SET 5,L': 0xED,
        'SET 5,(HL)': 0xEE,
        'SET 5,A': 0xEF,
        'SET 6,B': 0xF0,
        'SET 6,C': 0xF1,
        'SET 6,D': 0xF2,
        'SET 6,E': 0xF3,
        'SET 6,H': 0xF4,
        'SET 6,L': 0xF5,
        'SET 6,(HL)': 0xF6,
        'SET 6,A': 0xF7,
        'SET 7,B': 0xF8,
        'SET 7,C': 0xF9,
        'SET 7,D': 0xFA,
        'SET 7,E': 0xFB,
        'SET 7,H': 0xFC,
        'SET 7,L': 0xFD,
        'SET 7,(HL)': 0xFE,
        'SET 7,A': 0xFF
    };

    var fd_cb_codes = {
        'RLC (IY+&00)->B': 0x00,
        'rlc (IY+&00)->C': 0x01,
        'rlc (IY+&00)->D': 0x02,
        'rlc (IY+&00)->E': 0x03,
        'rlc (IY+&00)->H': 0x04,
        'rlc (IY+&00)->L': 0x05,
        'RLC (IY+&00)': 0x06,
        'rlc (IY+&00)->A': 0x07,
        'RRC (IY+&00)->B': 0x08,
        'RRC (IY+&00)->C': 0x09,
        'RRC (IY+&00)->D': 0x0A,
        'RRC (IY+&00)->E': 0x0B,
        'RRC (IY+&00)->H': 0x0C,
        'RRC (IY+&00)->L': 0x0D,
        'RRC (IY+&00)': 0x0E,
        'RRC (IY+&00)->A': 0x0F,
        'RL (IY+&00)->B': 0x10,
        'RL (IY+&00)->C': 0x11,
        'RL (IY+&00)->D': 0x12,
        'RL (IY+&00)->E': 0x13,
        'RL (IY+&00)->H': 0x14,
        'RL (IY+&00)->L': 0x15,
        'RL (IY+&00)': 0x16,
        'RL (IY+&00)->A': 0x17,
        'RR (IY+&00)->B': 0x18,
        'RR (IY+&00)->C': 0x19,
        'RR (IY+&00)->D': 0x1A,
        'RR (IY+&00)->E': 0x1B,
        'RR (IY+&00)->H': 0x1C,
        'RR (IY+&00)->L': 0x1D,
        'RR (IY+&00)': 0x1E,
        'RR (IY+&00)->A': 0x1F,
        'SLA (IY+&00)->B': 0x20,
        'SLA (IY+&00)->C': 0x21,
        'SLA (IY+&00)->D': 0x22,
        'SLA (IY+&00)->E': 0x23,
        'SLA (IY+&00)->H': 0x24,
        'SLA (IY+&00)->L': 0x25,
        'SLA (IY+&00)': 0x26,
        'SLA (IY+&00)->A': 0x27,
        'SRA (IY+&00)->B': 0x28,
        'SRA (IY+&00)->C': 0x29,
        'SRA (IY+&00)->D': 0x2A,
        'SRA (IY+&00)->E': 0x2B,
        'SRA (IY+&00)->H': 0x2C,
        'SRA (IY+&00)->L': 0x2D,
        'SRA (IY+&00)': 0x2E,
        'SRA (IY+&00)->A': 0x2F,
        'SLS (IY+&00)->B': 0x30,
        'SLS (IY+&00)->C': 0x31,
        'SLS (IY+&00)->D': 0x32,
        'SLS (IY+&00)->E': 0x33,
        'SLS (IY+&00)->H': 0x34,
        'SLS (IY+&00)->L': 0x35,
        'SLS (IY+&00)': 0x36,
        'SLS (IY+&00)->A': 0x37,
        'SRL (IY+&00)->B': 0x38,
        'SRL (IY+&00)->C': 0x39,
        'SRL (IY+&00)->D': 0x3A,
        'SRL (IY+&00)->E': 0x3B,
        'SRL (IY+&00)->H': 0x3C,
        'SRL (IY+&00)->L': 0x3D,
        'SRL (IY+&00)': 0x3E,
        'SRL (IY+&00)->A': 0x3F,
        'BIT 0,(IY+&00)->B': 0x40,
        'BIT 0,(IY+&00)->C': 0x41,
        'BIT 0,(IY+&00)->D': 0x42,
        'BIT 0,(IY+&00)->E': 0x43,
        'BIT 0,(IY+&00)->H': 0x44,
        'BIT 0,(IY+&00)->L': 0x45,
        'BIT 0,(IY+&00)': 0x46,
        'BIT 0,(IY+&00)->A': 0x47,
        'BIT 1,(IY+&00)->B': 0x48,
        'BIT 1,(IY+&00)->C': 0x49,
        'BIT 1,(IY+&00)->D': 0x4A,
        'BIT 1,(IY+&00)->E': 0x4B,
        'BIT 1,(IY+&00)->H': 0x4C,
        'BIT 1,(IY+&00)->L': 0x4D,
        'BIT 1,(IY+&00)': 0x4E,
        'BIT 1,(IY+&00)->A': 0x4F,
        'BIT 2,(IY+&00)->B': 0x50,
        'BIT 2,(IY+&00)->C': 0x51,
        'BIT 2,(IY+&00)->D': 0x52,
        'BIT 2,(IY+&00)->E': 0x53,
        'BIT 2,(IY+&00)->H': 0x54,
        'BIT 2,(IY+&00)->L': 0x55,
        'BIT 2,(IY+&00)': 0x56,
        'BIT 2,(IY+&00)->A': 0x57,
        'BIT 3,(IY+&00)->B': 0x58,
        'BIT 3,(IY+&00)->C': 0x59,
        'BIT 3,(IY+&00)->D': 0x5A,
        'BIT 3,(IY+&00)->E': 0x5B,
        'BIT 3,(IY+&00)->H': 0x5C,
        'BIT 3,(IY+&00)->L': 0x5D,
        'BIT 3,(IY+&00)': 0x5E,
        'BIT 3,(IY+&00)->A': 0x5F,
        'BIT 4,(IY+&00)->B': 0x60,
        'BIT 4,(IY+&00)->C': 0x61,
        'BIT 4,(IY+&00)->D': 0x62,
        'BIT 4,(IY+&00)->E': 0x63,
        'BIT 4,(IY+&00)->H': 0x64,
        'BIT 4,(IY+&00)->L': 0x65,
        'BIT 4,(IY+&00)': 0x66,
        'BIT 4,(IY+&00)->A': 0x67,
        'BIT 5,(IY+&00)->B': 0x68,
        'BIT 5,(IY+&00)->C': 0x69,
        'BIT 5,(IY+&00)->D': 0x6A,
        'BIT 5,(IY+&00)->E': 0x6B,
        'BIT 5,(IY+&00)->H': 0x6C,
        'BIT 5,(IY+&00)->L': 0x6D,
        'BIT 5,(IY+&00)': 0x6E,
        'BIT 5,(IY+&00)->A': 0x6F,
        'BIT 6,(IY+&00)->B': 0x70,
        'BIT 6,(IY+&00)->C': 0x71,
        'BIT 6,(IY+&00)->D': 0x72,
        'BIT 6,(IY+&00)->E': 0x73,
        'BIT 6,(IY+&00)->H': 0x74,
        'BIT 6,(IY+&00)->L': 0x75,
        'BIT 6,(IY+&00)': 0x76,
        'BIT 6,(IY+&00)->A': 0x77,
        'BIT 7,(IY+&00)->B': 0x78,
        'BIT 7,(IY+&00)->C': 0x79,
        'BIT 7,(IY+&00)->D': 0x7A,
        'BIT 7,(IY+&00)->E': 0x7B,
        'BIT 7,(IY+&00)->H': 0x7C,
        'BIT 7,(IY+&00)->L': 0x7D,
        'BIT 7,(IY+&00)': 0x7E,
        'BIT 7,(IY+&00)->A': 0x7F,
        'RES 0,(IY+&00)->B': 0x80,
        'RES 0,(IY+&00)->C': 0x81,
        'RES 0,(IY+&00)->D': 0x82,
        'RES 0,(IY+&00)->E': 0x83,
        'RES 0,(IY+&00)->H': 0x84,
        'RES 0,(IY+&00)->L': 0x85,
        'RES 0,(IY+&00)': 0x86,
        'RES 0,(IY+&00)->A': 0x87,
        'RES 1,(IY+&00)->B': 0x88,
        'RES 1,(IY+&00)->C': 0x89,
        'RES 1,(IY+&00)->D': 0x8A,
        'RES 1,(IY+&00)->E': 0x8B,
        'RES 1,(IY+&00)->H': 0x8C,
        'RES 1,(IY+&00)->L': 0x8D,
        'RES 1,(IY+&00)': 0x8E,
        'RES 1,(IY+&00)->A': 0x8F,
        'RES 2,(IY+&00)->B': 0x90,
        'RES 2,(IY+&00)->C': 0x91,
        'RES 2,(IY+&00)->D': 0x92,
        'RES 2,(IY+&00)->E': 0x93,
        'RES 2,(IY+&00)->H': 0x94,
        'RES 2,(IY+&00)->L': 0x95,
        'RES 2,(IY+&00)': 0x96,
        'RES 2,(IY+&00)->A': 0x97,
        'RES 3,(IY+&00)->B': 0x98,
        'RES 3,(IY+&00)->C': 0x99,
        'RES 3,(IY+&00)->D': 0x9A,
        'RES 3,(IY+&00)->E': 0x9B,
        'RES 3,(IY+&00)->H': 0x9C,
        'RES 3,(IY+&00)->L': 0x9D,
        'RES 3,(IY+&00)': 0x9E,
        'RES 3,(IY+&00)->A': 0x9F,
        'RES 4,(IY+&00)->B': 0xA0,
        'RES 4,(IY+&00)->C': 0xA1,
        'RES 4,(IY+&00)->D': 0xA2,
        'RES 4,(IY+&00)->E': 0xA3,
        'RES 4,(IY+&00)->H': 0xA4,
        'RES 4,(IY+&00)->L': 0xA5,
        'RES 4,(IY+&00)': 0xA6,
        'RES 4,(IY+&00)->A': 0xA7,
        'RES 5,(IY+&00)->B': 0xA8,
        'RES 5,(IY+&00)->C': 0xA9,
        'RES 5,(IY+&00)->D': 0xAA,
        'RES 5,(IY+&00)->E': 0xAB,
        'RES 5,(IY+&00)->H': 0xAC,
        'RES 5,(IY+&00)->L': 0xAD,
        'RES 5,(IY+&00)': 0xAE,
        'RES 5,(IY+&00)->A': 0xAF,
        'RES 6,(IY+&00)->B': 0xB0,
        'RES 6,(IY+&00)->C': 0xB1,
        'RES 6,(IY+&00)->D': 0xB2,
        'RES 6,(IY+&00)->E': 0xB3,
        'RES 6,(IY+&00)->H': 0xB4,
        'RES 6,(IY+&00)->L': 0xB5,
        'RES 6,(IY+&00)': 0xB6,
        'RES 6,(IY+&00)->A': 0xB7,
        'RES 7,(IY+&00)->B': 0xB8,
        'RES 7,(IY+&00)->C': 0xB9,
        'RES 7,(IY+&00)->D': 0xBA,
        'RES 7,(IY+&00)->E': 0xBB,
        'RES 7,(IY+&00)->H': 0xBC,
        'RES 7,(IY+&00)->L': 0xBD,
        'RES 7,(IY+&00)': 0xBE,
        'RES 7,(IY+&00)->A': 0xBF,
        'SET 0,(IY+&00)->B': 0xC0,
        'SET 0,(IY+&00)->C': 0xC1,
        'SET 0,(IY+&00)->D': 0xC2,
        'SET 0,(IY+&00)->E': 0xC3,
        'SET 0,(IY+&00)->H': 0xC4,
        'SET 0,(IY+&00)->L': 0xC5,
        'SET 0,(IY+&00)': 0xC6,
        'SET 0,(IY+&00)->A': 0xC7,
        'SET 1,(IY+&00)->B': 0xC8,
        'SET 1,(IY+&00)->C': 0xC9,
        'SET 1,(IY+&00)->D': 0xCA,
        'SET 1,(IY+&00)->E': 0xCB,
        'SET 1,(IY+&00)->H': 0xCC,
        'SET 1,(IY+&00)->L': 0xCD,
        'SET 1,(IY+&00)': 0xCE,
        'SET 1,(IY+&00)->A': 0xCF,
        'SET 2,(IY+&00)->B': 0xD0,
        'SET 2,(IY+&00)->C': 0xD1,
        'SET 2,(IY+&00)->D': 0xD2,
        'SET 2,(IY+&00)->E': 0xD3,
        'SET 2,(IY+&00)->H': 0xD4,
        'SET 2,(IY+&00)->L': 0xD5,
        'SET 2,(IY+&00)': 0xD6,
        'SET 2,(IY+&00)->A': 0xD7,
        'SET 3,(IY+&00)->B': 0xD8,
        'SET 3,(IY+&00)->C': 0xD9,
        'SET 3,(IY+&00)->D': 0xDA,
        'SET 3,(IY+&00)->E': 0xDB,
        'SET 3,(IY+&00)->H': 0xDC,
        'SET 3,(IY+&00)->L': 0xDD,
        'SET 3,(IY+&00)': 0xDE,
        'SET 3,(IY+&00)->A': 0xDF,
        'SET 4,(IY+&00)->B': 0xE0,
        'SET 4,(IY+&00)->C': 0xE1,
        'SET 4,(IY+&00)->D': 0xE2,
        'SET 4,(IY+&00)->E': 0xE3,
        'SET 4,(IY+&00)->H': 0xE4,
        'SET 4,(IY+&00)->L': 0xE5,
        'SET 4,(IY+&00)': 0xE6,
        'SET 4,(IY+&00)->A': 0xE7,
        'SET 5,(IY+&00)->B': 0xE8,
        'SET 5,(IY+&00)->C': 0xE9,
        'SET 5,(IY+&00)->D': 0xEA,
        'SET 5,(IY+&00)->E': 0xEB,
        'SET 5,(IY+&00)->H': 0xEC,
        'SET 5,(IY+&00)->L': 0xED,
        'SET 5,(IY+&00)': 0xEE,
        'SET 5,(IY+&00)->A': 0xEF,
        'SET 6,(IY+&00)->B': 0xF0,
        'SET 6,(IY+&00)->C': 0xF1,
        'SET 6,(IY+&00)->D': 0xF2,
        'SET 6,(IY+&00)->E': 0xF3,
        'SET 6,(IY+&00)->H': 0xF4,
        'SET 6,(IY+&00)->L': 0xF5,
        'SET 6,(IY+&00)': 0xF6,
        'SET 6,(IY+&00)->A': 0xF7,
        'SET 7,(IY+&00)->B': 0xF8,
        'SET 7,(IY+&00)->C': 0xF9,
        'SET 7,(IY+&00)->D': 0xFA,
        'SET 7,(IY+&00)->E': 0xFB,
        'SET 7,(IY+&00)->H': 0xFC,
        'SET 7,(IY+&00)->L': 0xFD,
        'SET 7,(IY+&00)': 0xFE,
        'SET 7,(IY+&00)->A': 0xFF
    };

    var ed_codes = {
        'MOS_QUIT': 0x00,
        'MOS_CLI': 0x01,
        'MOS_BYTE': 0x02,
        'MOS_WORD': 0x03,
        'MOS_WRCH': 0x04,
        'MOS_RDCH': 0x05,
        'MOS_FILE': 0x06,
        'MOS_ARGS': 0x07,
        'MOS_BGET': 0x08,
        'MOS_BPUT': 0x09,
        'MOS_GBPB': 0x0A,
        'MOS_FIND': 0x0B,
        'MOS_FF0C': 0x0C,
        'MOS_FF0D': 0x0D,
        'MOS_FF0E': 0x0E,
        'MOS_FF0F': 0x0F,
        'IN B,(C)': 0x40,
        'OUT (C),B': 0x41,
        'SBC HL,BC': 0x42,

        'LD (&0000),BC': 0x43,
        'NEG': 0x44,
        'RETN': 0x45,
        'IM 0': 0x46,
        'LD I,A': 0x47,
        'IN C,(C)': 0x48,
        'OUT (C),C': 0x49,
        'ADC HL,BC': 0x4A,
        'LD BC,(&0000)': 0x4B,
        '[neg]': 0x4C,
        'RETI': 0x4D,
        '[im0]': 0x4E,
        'LD R,A': 0x4F,
        'IN D,(C)': 0x50,
        'OUT (C),D': 0x51,
        'SBC HL,DE': 0x52,
        'LD (&0000),DE': 0x53,
        'IM 1': 0x56,
        'LD A,I': 0x57,
        'IN E,(C)': 0x58,
        'OUT (C),E': 0x59,
        'ADC HL,DE': 0x5A,
        'LD DE,(&0000)': 0x5B,
        '[reti]': 0x5D,
        'IM 2': 0x5E,
        'LD A,R': 0x5F,
        'IN H,(C)': 0x60,
        'OUT (C),H': 0x61,
        'SBC HL,HL': 0x62,
/*        'LD (&0000),HL': 0x63,   BEWARE OF DUPLICATES!!! */
        'RRD': 0x67,
        'IN L,(C)': 0x68,
        'OUT (C),L': 0x69,
        'ADC HL,HL': 0x6A,
/*        'LD HL,(&0000)': 0x6B, */
        'RLD': 0x6F,
        'IN F,(C)': 0x70,
        'OUT (C),F': 0x71,
        'SBC HL,SP': 0x72,
        'LD (&0000),SP': 0x73,
        'IN A,(C)': 0x78,
        'OUT (C),A': 0x79,
        'ADC HL,SP': 0x7A,
        'LD SP,(&0000)': 0x7B,
        '[ld r,r?]': 0x7F,
        'LDI': 0xA0,
        'CPI': 0xA1,
        'INI': 0xA2,
        'OTI': 0xA3,
        'LDD': 0xA8,
        'CPD': 0xA9,
        'IND': 0xAA,
        'OTD': 0xAB,
        'LDIR': 0xB0,
        'CPIR': 0xB1,
        'INIR': 0xB2,
        'OTIR': 0xB3,
        'LDDR': 0xB8,
        'CPDR': 0xB9,
        'INDR': 0xBA,
        'OTDR': 0xBB,
        'ED_LOAD': 0xFB
    };
    var fd_codes = {};
    var dd_cb_codes = {};    
    var code_types = [opcodes,[],cb_codes,[0xcb],dd_codes,[0xdd],ed_codes,[0xed],fd_cb_codes,[0xfd,0xcb]];
    var opFragments = [];
    var opBlocks = {};
    var opFragmentsI = [];
    var opBlocksI = [];

    function prepare_disassembly_tables() {
        if (opBlocksI.length === 0) {
            for(var key in opBlocks) {
                var index = Number(opBlocks[key][0]);
                if (opBlocksI[index] === undefined) {
                    if (opBlocks[key].length === 1) {
                        opBlocksI[index] =  key;
                    } else {
                        opBlocksI[index] = [];
                        var index2 = Number(opBlocks[key][1]);
                        opBlocksI[index][index2] = key;
                    }
                } else {
                    if (opBlocks[key].length > 1) {
                        var index2 = Number(opBlocks[key][1]);
                        opBlocksI[index][index2] = key;
                    }
                }
            }
        }
        if(opFragmentsI.length === 0) {
            for(var i = 0; i < opFragments.length; i++) {
                var frag = opFragments[i];
                var frag_dup = frag[0].slice();
                var frag_len = frag_dup.length;
                if (frag_len === 1) {
                    opFragmentsI[Number(frag_dup.shift())] = [frag];
                }
                else if (frag_len === 2) {
                    var idx = Number(frag_dup.shift());
                    if (opFragmentsI[idx] === undefined) {
                        opFragmentsI[idx] = [];
                    }
                    opFragmentsI[idx][Number(frag_dup.shift())] = frag;
                } else {
                    var idx = Number(frag_dup.shift());
                    var idx2 = Number(frag_dup.shift());
                    if (opFragmentsI[idx] === undefined) {
                        opFragmentsI[idx] = [];
                    }
                    if (opFragmentsI[idx][idx2] === undefined) {
                        opFragmentsI[idx][idx2] = [];
                    }
                    opFragmentsI[idx][idx2][Number(frag_dup.shift())] = frag;                    
                }
            }
        }
    }

    function oplength_comp(a, b)
    {
        if (a[1].length < b[1].length) return 1;
        if (a[1].length > b[1].length) return -1;
        var l = (a.length === 3) ? -1 : a[3].length;
        var l2 = (b.length === 3) ? -1 : b[3].length;
        return l2 - l;
    }

    function buildParserTables() {
        for(var i in fd_cb_codes) {
            var op = fd_cb_codes[i];
            i = i.replace('IY','IX');
            dd_cb_codes[i] = op;
        }
        code_types.push(dd_cb_codes,[0xdd,0xcb]);
        
        for(var i in dd_codes) {
            var op = dd_codes[i];
            i = i.replace('IX','IY');
            fd_codes[i] = op;
        }
        code_types.push(fd_codes,[0xfd]);

        for (var i = 0; i < code_types.length ; i+= 2) {
            var op_codes = code_types[i];
            var prefix = code_types[i+1];
            prepareFragments(op_codes,prefix);
        }
        opFragments.sort(oplength_comp);
    }
    var codes_done = {};

    function prepareFragments(source_codes,prefix) {
        var idx;
        var codes = Object.keys(source_codes);
        var l;
        for (var i = 0; i < codes.length; i++) {
            if (codes_done.hasOwnProperty(codes[i])) {
                console.log(codes[i] + " repeated");
            }
            codes_done[codes[i]] = 1;
            var type = null;
            if(codes[i].indexOf('&0000') !== -1) {
                type = 'W';
                l = 5;
                idx = codes[i].indexOf('&0000');
            }
            else if(codes[i].indexOf('&00') !== -1) {
                idx = codes[i].indexOf('&00');
                l = 3;
                if (codes[i].lastIndexOf('&00') === idx) {
                    type = 'B';
                } else {
                    type = 'BB';
                }
            }
            else if (codes[i].indexOf('&4546') !== -1) {
                idx = codes[i].indexOf('&4546');
                type = 'R';
                l = 5;
            }
            var opcode = prefix.slice(); // copy the prefix array
/*            if (!(source_codes.hasOwnProperty(codes[i]))) {
                var x = 22;
                x++;
            } */
            opcode.push(source_codes[codes[i]]);
            if (type) {
                var fragment = [opcode,codes[i].substring(0,idx).trim(),type];
                if (idx + l < codes[i].length) {
                    if(type === 'BB') {
                        fragment.push(codes[i].substring(idx+l,codes[i].lastIndexOf('&00')));
                    } else {
                        fragment.push(codes[i].substring(idx+l).trim());
                    }
                }
                opFragments.push(fragment);
            } else {
                opBlocks[codes[i]] = opcode;
            }
            delete source_codes[codes[i]];
        }
    }

    return { get_codes: function() {
        prepare_disassembly_tables();        
        if (opFragments.length === 0) {
            buildParserTables();
        }
        return {opFragments:opFragments,opBlocks:opBlocks,opFragmentsI:opFragmentsI,opBlocksI:opBlocksI};
//        return {opcodes: opcodes,dd_codes: dd_codes,cb_codes: cb_codes,fd_cb_codes: fd_cb_codes,ff_codes:ff_codes,code_types: code_types};
        }
    };
});

